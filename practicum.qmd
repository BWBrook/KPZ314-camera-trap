---
title: "KPZ314 Camera‑trap Practical"
format: html
execute:
  echo: true
  warning: false
---

```{r setup, include=FALSE}
# Keep the pipeline behaviour the same as the original practicum
library(targets)
tar_config_set(script = "_targets.R")

# Auto‑build if the cache is empty
if (!tar_exist_objects(names = "raw")) {
  message("Building targets (~3–5 min on fresh clone)…")
  tar_make()
}

# Build selected dynamic targets if missing (so tar_read() won't fail on branches)
needed <- c(
  "fig_glm_coef","fig_glm_pd_type",
  "fig_det_heat","psi_curves_all","fig_psi_curves",
  "tab_occu","fig_occu",
  "alpha_delta_unknown_tbl","beta_delta_unknown",
  "fig_coocc_heat","fig_coocc_heat_by_type","overlap_summary","fig_overlap_pairs"
)
need_missing <- needed[!tar_exist_objects(names = needed)]
if (length(need_missing)) {
  message("Building missing dynamic targets: ", paste(need_missing, collapse = ", "))
  tar_make(names = need_missing)
}

# Load canonical targets used throughout the workbook
raw              <- tar_read(raw)
site             <- tar_read(site)
taxa             <- tar_read(taxa)
alpha            <- tar_read(alpha)
alpha_ci         <- tar_read(alpha_ci)
comm             <- tar_read(comm)
beta_bc          <- tar_read(beta_bc)
beta_jac         <- tar_read(beta_jac)
fig_site_map     <- tar_read(fig_site_map)
fig_sp_trends    <- tar_read(fig_sp_trends)
fig_heat         <- if (tar_exist_objects("fig_heat")) tar_read(fig_heat) else tar_read(fig_heat_bc)
fig_heat_jac     <- tar_read(fig_heat_jac)
fig_nmds         <- tar_read(fig_nmds)
fig_nmds_jac     <- tar_read(fig_nmds_jac)
nmds_stats       <- tar_read(nmds_stats)
gamma_all        <- tar_read(gamma_all)
gamma_region     <- tar_read(gamma_region)
gamma_by_habitat <- tar_read(gamma_by_habitat)
gamma_all_ci     <- tar_read(gamma_all_ci)
rare_region      <- tar_read(rare_region)
rare_raw         <- tar_read(rare_raw)
gap_sensitivity  <- tar_read(gap_sensitivity)
fig_gap          <- tar_read(fig_gap)
tab_effort       <- tar_read(tab_effort)
rai              <- tar_read(rai)
beta_permanova   <- tar_read(beta_permanova)
beta_r2_delta    <- tar_read(beta_r2_delta)

# GLMs
glm_diag_all     <- tar_read(glm_diag_all)
glm_irrs_all     <- tar_read(glm_irrs_all)
fig_glm_coef     <- tar_read(fig_glm_coef)
fig_glm_pd_type  <- tar_read(fig_glm_pd_type)

# Detectability
fig_det_heat     <- tar_read(fig_det_heat)
psi_curves_all   <- tar_read(psi_curves_all)
fig_psi_curves   <- tar_read(fig_psi_curves)
det_days_max     <- tar_read(det_days_max)
tab_occu         <- tar_read(tab_occu)
fig_occu         <- tar_read(fig_occu)

# Unknown-animal sensitivity
alpha_delta_unknown <- tar_read(alpha_delta_unknown_tbl)
beta_delta_unknown  <- tar_read(beta_delta_unknown)

# Inter‑specific structure
fig_coocc_heat        <- tar_read(fig_coocc_heat)
fig_coocc_heat_by_type<- tar_read(fig_coocc_heat_by_type)
overlap_summary       <- tar_read(overlap_summary)
fig_overlap_pairs     <- tar_read(fig_overlap_pairs)

# Species spotlight from earlier sections (optional)
fig_sp_trends    <- tar_read(fig_sp_trends)
```

## 0. How to use this workbook

This practical workbook for camera-trap analysis provides context, interpretation guides, and short tasks to help you learn **why** each method is used and **how** to read its outputs. Every section has:

- *Context*: the ecological question we’re probing.
- *What you see*: which targets/figures are shown and how to read them.
- *Checklist*: a few rules of thumb to avoid classic mistakes.
- *Tasks*: short, pointed prompts (≤ 40–50 words each).

> **Assessment alignment**  
> The prompts mirror the Field Project Report criteria: justification, methods, results, interpretation, and limits.

---

## 1. Orientation — what counts as “data”?

**Context.** Camera traps collect *bursty* images triggered by motion. To analyse communities rather than pixels, we reduce images to **independent events** with timestamps and species IDs.

```{r}
dplyr::glimpse(raw)
```

::: callout-note
**What you see.** Columns: `site`, `common`, `datetime`, `event` (independent event ID), plus file and count.  
**Why this matters.** Everything downstream: diversity, turnover, models, assumes we’re counting **events**, not frames.
:::

**TASK 1.0** Explain why events (not images) are the unit of analysis for community ecology.

```{r}
fig_site_map
```

**TASK 1.1** The sites are geographically separated. Name two *non‑spatial* reasons communities could still differ between sites.

---

## 2. Independent events & effort — choosing a sensible gap

**Context.** A wallaby lingering in front of a camera can fire multiple images. We enforce a **gap** (minutes) so within‑bout triggers are merged into one event. But too large a gap discards information.

```{r}
fig_gap
```

::: callout-note
**What you see.** Each line is a site; panels show how **RAI** (events/100 trap‑nights), **richness**, and **total events** change as the gap increases (1, 5, 10, 30 min).
- Sharp drop from 1→5 min ⇒ many within‑bout retriggers.
- Flat richness ⇒ events change, **presence** does not.
- So we Choose the **smallest stable** gap (usually 5–10 min).
:::

**Effort transparency.** We report effort as **trap‑nights** and RAIs.

```{r}
tab_effort
head(rai, 8)
```

**TASK 2.1** Justify why we pragmatically selected 5 min as the gap, using the panel figure.  

---

## 3. Diversity with uncertainty — α, γ and sufficiency

**Context.** Species richness treats all species equally. **Hill numbers** unify richness and evenness:
- q=0: richness;
- q=1: effective species from Shannon (exp *H*);
- q=2: inverse Simpson (dominance‑sensitive).

```{r}
# Boxplots (counts vs entropy-like metrics)
alpha_long_counts <- tidyr::pivot_longer(dplyr::select(alpha, site, richness, chao1), -site,
                                         names_to = "metric", values_to = "value")
alpha_long_entropy <- tidyr::pivot_longer(dplyr::select(alpha, site, pielou, shannon, simpson), -site,
                                          names_to = "metric", values_to = "value")
par(mfrow = c(1,2))
print(ggplot2::ggplot(alpha_long_counts, ggplot2::aes(metric, value)) + ggplot2::geom_boxplot())
print(ggplot2::ggplot(alpha_long_entropy, ggplot2::aes(metric, value)) + ggplot2::geom_boxplot())
par(mfrow = c(1,1))
```

```{r}
if (!is.null(alpha_ci)) knitr::kable(utils::head(alpha_ci, 12),
  caption = "Alpha diversity (Hill) with percentile bootstrap 95% CIs (first 12 rows)"
)
```

::: callout-tip
**Checklist.**
- Divergence between q=0 and q=2 ⇒ **evenness** differences.
- Report uncertainty: quote **point ± 95% CI**.
- Do not compare sites on raw counts alone; use **RAIs** for rates.
:::

**TASK 3.1** Choose one site with unusually high or low Shannon; suggest one ecological driver.

### 3.2 Total (γ) diversity and coverage

```{r}
rare_raw
```

**TASK 3.2** Are some sites likely **undersampled**? Defend the claim.

```{r}
if (!is.null(gamma_all_ci)) {
  knitr::kable(gamma_by_habitat, caption = "Habitat‑level γ diversity (Hill) with site‑bootstrap 95% CIs")
}
rare_region
```

::: callout-note
**What you see.** Habitat curves with **coverage** at the endpoint (S_obs/Chao1). Values near 1 mean sampling is close to asymptote.
:::

**TASK 3.3** Are the wet and dry habitats close to asymptote?  

---

## 4. Community turnover — composition vs dominance

**Context.** Communities differ by which species occur (**composition**) and by how abundant they are (**dominance**). We therefore use **Jaccard** (presence–absence) and **Bray–Curtis** (abundance).

```{r}
fig_heat_jac # Jaccard within‑habitat dissimilarities
```

```{r}
fig_nmds
if (!is.null(fig_nmds_jac)) fig_nmds_jac
if (!is.null(nmds_stats)) knitr::kable(nmds_stats, caption = "NMDS stress by distance (seed echoed)")
```

```{r}
knitr::kable(beta_permanova, caption = "PERMANOVA (location) and dispersion tests")
```

::: callout-note
- Bray–Curtis (abundance-sensitive) highlights dominance shifts.  
- Jaccard (presence–absence) emphasises composition regardless of counts.  
:::

::: callout-tip
**Interpretation checklist.**
- Report **R²** (effect size) and **permutation p** for each metric.
- If **dispersion p < 0.05**, groups differ in **spread**; location (centroid) separation is uncertain.
- Stress > 0.2 ⇒ the NMDS geometry is unreliable; describe **relative group separation** only.
:::

**TASK 4.1** Name two site clusters that look compositionally similar; propose one abiotic driver.  
**TASK 4.2** Are wet vs dry distinct? Report R² and p for **both** distances, and state the dispersion caveat if triggered.

---

## 5. Habitat selection — effort‑offset GLMs

**Context.** To compare use across habitats while controlling effort, we model **event counts** with a **log(trap‑nights)** offset. Numeric covariates are **z‑scored**; coefficients are **IRRs** (multiplicative effects).

```{r}
if (!is.null(glm_diag_all)) knitr::kable(glm_diag_all, caption = "GLM diagnostics (family, dispersion, fit)")
if (!is.null(glm_irrs_all)) knitr::kable(glm_irrs_all, caption = "Incidence‑rate ratios (IRR) with 95% CIs")
for (p in fig_glm_coef) print(p)
for (p in fig_glm_pd_type) print(p)   # per 100 trap‑nights
```

::: callout-note
**Checklist.**
- IRR > 1 ⇒ increase; IRR < 1 ⇒ decrease. For **type**, the IRR compares wet to dry (baseline).
- Quasi‑Poisson CIs are **Wald** with dispersion‑inflated SEs; be cautious if sample sizes are small.
- Report **per +1 SD** effects for numeric covariates.
:::

**TASK 5.1** Pick one species and interpret the `type` IRR.  
**TASK 5.2** Which covariate has the strongest effect (IRR farthest from 1)? Interpret per +1 SD.

---

## 6. Imperfect detectability — p < 1

**Context.** Even when a species is present, we don’t always detect it on a given day (p < 1).  We build **daily detection histories**, track **naïve occupancy** ψ̂(t) by habitat, and fit one simple occupancy model.

### 6.1 Daily detection histories

```{r}
det_list <- targets::tar_read(fig_det_heat)

# Prefer a mid-frequency species (brush_bronzewing)
printed <- FALSE
for (i in seq_along(det_list)) {
  sp <- attr(det_list[[i]], "species")
  if (!is.null(sp) && sp == "brush_bronzewing") { print(det_list[[i]]); printed <- TRUE; break }
}
```

```{r}
if (length(fig_det_heat)) {
  sp <- attr(fig_det_heat[[1]], "species")
  print(fig_det_heat[[1]])
}

knitr::kable(dplyr::filter(psi_curves_all, day %in% c(3,7,14)),
               caption = "Naïve occupancy ψ̂(t) at days 3, 7, 14 by habitat")

if (!is.null(psi_curves_all)) {
  for (p in fig_psi_curves) print(p)
  cat("Note: curves are capped at det_days_max =", det_days_max, "days to keep denominators constant.\n")
}

knitr::kable(tab_occu, caption = "Occupancy demo for the Brush Bronzewing (ψ by habitat; p is per‑day detection probability)")

if (!is.null(tab_occu)) {
  print(fig_occu)
}
```

::: callout-warning
**Guardrail.** If ψ̂\_wet ≠ ψ̂\_dry but **p** is low, extra days of effort can change naïve conclusions. State this explicitly.
:::

**TASK 6.1** For this species (brush bronzewing), how many days are needed for ψ̂(t) ≥ 0.8 in wet vs dry?  
**TASK 6.2** Report ψ̂ with 95% CI from the demo model and explain what **p** implies for survey effort.

**Note:** We picked a species by choosing the one whose detection rate is closest to 50% of sites (ideally within 20–80%). This yields enough 0s and 1s across sites for stable estimation and clear contrasts.  

```{r}
inside_targets <- identical(Sys.getenv("TARGETS_RUNNING"), "1")
if (!targets::tar_exist_objects(names = "det_detect_summary_all") && !inside_targets) {
  targets::tar_make(names = c("det_histories","det_detect_summary","det_detect_summary_all"))
}

rank_tbl <- targets::tar_read(det_detect_summary_all) |>
  dplyr::mutate(closeness = abs(prop_overall - 0.5)) |>
  dplyr::arrange(closeness, dplyr::desc(prop_overall)) |>
  dplyr::mutate(
    prop_overall = round(prop_overall, 3),
    prop_dry     = round(prop_dry, 3),
    prop_wet     = round(prop_wet, 3),
    closeness    = round(closeness, 3)
  ) |>
  head(7)

knitr::kable(rank_tbl, caption = "Species ranked by windowed detection rate closeness to 0.5 (lower is better)")
```

---

**Sensitivity to labels.** Excluding `unknown_animal`:

```{r}
if (!is.null(beta_delta_unknown)) {
  knitr::kable(beta_delta_unknown,
               caption = "Unknown‑class sensitivity: Bray/Jaccard mean |Δ| and Pearson r")
}
```

---

## 7. Inter‑specific structure — patterns, not proof

**Context.** Co‑occurrence and activity overlaps can suggest structure (e.g., predator–prey avoidance) but also arise from **shared habitat** or **shared hours**.

```{r}
if (!is.null(fig_coocc_heat)) print(fig_coocc_heat)
if (!is.null(fig_coocc_heat_by_type)) print(fig_coocc_heat_by_type)
if (!is.null(overlap_summary)) knitr::kable(overlap_summary,
  caption = "Diel activity overlap Δ̂ (95% CIs) by habitat and species pair")
for (p in fig_overlap_pairs) print(p)
```

::: callout-danger
🔴 High |z| or high Δ̂ **suggests a hypothesis** only. Falsify by showing the signal persists **within habitats**, or disappears when you restrict to **time windows** where the species are active.
:::

**TASK 7.1** Pick one high‑|z| cell: propose a mechanism **and** a falsification test.  
**TASK 7.2** For one pair, does Δ̂ differ by habitat? Offer one ecological explanation and a refuter.

---

## 8. Other things to try

## 8.1 Species spotlight

```{r}
fig_sp_trends + ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 0.5, hjust = 1))
```

> **TASK 8.1** Which habitat records more possum events? Suggest one ecological driver.

---

### 8.2. Trait exploration (stretch goal)

**Link alpha metrics to species traits (from the taxa table).**

```{r}
# Example structure view (joined alpha + site metadata)
alpha_site <- dplyr::left_join(alpha, site, by = "site")
utils::str(alpha_site[,1:21])
```

> **TASK 8.2** If larger‑bodied taxa are more detectable, what pattern would you expect in the alpha metrics? Test it with a quick plot or summary, and comment.

---


## 9. Reflection (limits & ethics)

**TASK 9.1** State one limitation of camera traps for community inference in Tasmanian forests and how you would mitigate it (design or analysis).  
**TASK 9.2** Briefly note one ethical or welfare concern and how it is addressed in field protocols.

---

## 10. Free exploration

You can load any pipeline object into your R environment and explore it.

**For example:**

```{r}
# Assign the 'alpha' site diversity table to your workspace
alpha_local <- targets::tar_read(alpha)

# view the whole table in RStudio
alpha_local
```

**Try these ideas:**

* **Compare any two objects**
  e.g. plot Chao1 vs. Shannon diversity for all sites

  ```{r}
  alpha_tbl <- targets::tar_read(alpha)
  plot(alpha_tbl$chao1, alpha_tbl$shannon,
       xlab = "Chao1", ylab = "Shannon", pch = 16)
  ```

* **Investigate site metadata**

  ```{r}
  site_tbl <- targets::tar_read(site)
  summary(dplyr::select(site_tbl, type, leaf_litter, cwd, can_foliage))
  ```

* **Make a custom plot**

  ```{r}
  taxa_tbl <- targets::tar_read(taxa)
  ggplot2::ggplot(dplyr::filter(taxa_tbl, !is.na(status) & status != "na"),
                  ggplot2::aes(x = status, fill = status)) +
    ggplot2::geom_bar(show.legend = FALSE) +
    ggplot2::labs(title = "Taxon status in Tasmanian fauna",
        x = "Status", y = "Frequency") +
    ggplot2::theme_minimal()
  ```

> **TASK 7.1** Are native or introduced taxa more common in this camera-trap dataset? What does this suggest about Tasmania’s fauna?

* **Re-run a helper function yourself**

  Try feeding a subset of data to `calc_alpha()` or `build_comm_matrix()`.

  ```{r}
  # For interactive use of helpers:
  source("R/helpers_metrics.R")

  joined <- targets::tar_read(joined)
  custom <- joined[joined$type == "dry", ]
  calc_alpha(custom)
  ```

**Or try anything else**: every object from the workflow is just a data frame or matrix you can inspect, plot, or save!

Every object is a data frame, matrix, or plot. Use `tar_manifest()` to see available targets. 

Try building your own small analysis below.

```{r}
# Your code here
```
